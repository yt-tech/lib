// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: controlAck.proto

package yt

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtocolAckType int32

const (
	ProtocolAckType_CONNECTACK    ProtocolAckType = 0
	ProtocolAckType_SUBaCK        ProtocolAckType = 1
	ProtocolAckType_UNSUBACK      ProtocolAckType = 2
	ProtocolAckType_HOLDMICACK    ProtocolAckType = 3
	ProtocolAckType_RELEASEMICACK ProtocolAckType = 4
	ProtocolAckType_DISCONNECTACK ProtocolAckType = 5
)

var ProtocolAckType_name = map[int32]string{
	0: "CONNECTACK",
	1: "SUBaCK",
	2: "UNSUBACK",
	3: "HOLDMICACK",
	4: "RELEASEMICACK",
	5: "DISCONNECTACK",
}

var ProtocolAckType_value = map[string]int32{
	"CONNECTACK":    0,
	"SUBaCK":        1,
	"UNSUBACK":      2,
	"HOLDMICACK":    3,
	"RELEASEMICACK": 4,
	"DISCONNECTACK": 5,
}

func (x ProtocolAckType) String() string {
	return proto.EnumName(ProtocolAckType_name, int32(x))
}

func (ProtocolAckType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_28e41d5d1777a9d0, []int{0}
}

type ControlAck struct {
	ProtocolType         uint32   `protobuf:"varint,1,opt,name=protocolType,proto3" json:"protocolType,omitempty"`
	UserID               uint32   `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	TopicID              uint32   `protobuf:"varint,3,opt,name=topicID,proto3" json:"topicID,omitempty"`
	AckCode              uint32   `protobuf:"varint,4,opt,name=ackCode,proto3" json:"ackCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlAck) Reset()         { *m = ControlAck{} }
func (m *ControlAck) String() string { return proto.CompactTextString(m) }
func (*ControlAck) ProtoMessage()    {}
func (*ControlAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_28e41d5d1777a9d0, []int{0}
}
func (m *ControlAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlAck.Merge(m, src)
}
func (m *ControlAck) XXX_Size() int {
	return m.Size()
}
func (m *ControlAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlAck.DiscardUnknown(m)
}

var xxx_messageInfo_ControlAck proto.InternalMessageInfo

func (m *ControlAck) GetProtocolType() uint32 {
	if m != nil {
		return m.ProtocolType
	}
	return 0
}

func (m *ControlAck) GetUserID() uint32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *ControlAck) GetTopicID() uint32 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *ControlAck) GetAckCode() uint32 {
	if m != nil {
		return m.AckCode
	}
	return 0
}

func init() {
	proto.RegisterEnum("yt.ProtocolAckType", ProtocolAckType_name, ProtocolAckType_value)
	proto.RegisterType((*ControlAck)(nil), "yt.ControlAck")
}

func init() { proto.RegisterFile("controlAck.proto", fileDescriptor_28e41d5d1777a9d0) }

var fileDescriptor_28e41d5d1777a9d0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xce, 0xcf, 0x2b,
	0x29, 0xca, 0xcf, 0x71, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xaa, 0x2c,
	0x51, 0xaa, 0xe1, 0xe2, 0x72, 0x86, 0x8b, 0x0b, 0x29, 0x71, 0xf1, 0x80, 0xa5, 0x92, 0xf3, 0x73,
	0x42, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x50, 0xc4, 0x84, 0xc4, 0xb8,
	0xd8, 0x4a, 0x8b, 0x53, 0x8b, 0x3c, 0x5d, 0x24, 0x98, 0xc0, 0xb2, 0x50, 0x9e, 0x90, 0x04, 0x17,
	0x7b, 0x49, 0x7e, 0x41, 0x66, 0xb2, 0xa7, 0x8b, 0x04, 0x33, 0x58, 0x02, 0xc6, 0x05, 0xc9, 0x24,
	0x26, 0x67, 0x3b, 0xe7, 0xa7, 0xa4, 0x4a, 0xb0, 0x40, 0x64, 0xa0, 0x5c, 0xad, 0x42, 0x2e, 0x7e,
	0x98, 0xd9, 0x8e, 0xc9, 0xd9, 0x60, 0xe3, 0xf9, 0xb8, 0xb8, 0x9c, 0xfd, 0xfd, 0xfc, 0x5c, 0x9d,
	0x43, 0x1c, 0x9d, 0xbd, 0x05, 0x18, 0x84, 0xb8, 0xb8, 0xd8, 0x82, 0x43, 0x9d, 0x12, 0x9d, 0xbd,
	0x05, 0x18, 0x85, 0x78, 0xb8, 0x38, 0x42, 0xfd, 0x82, 0x43, 0x9d, 0x40, 0x32, 0x4c, 0x20, 0x95,
	0x1e, 0xfe, 0x3e, 0x2e, 0xbe, 0x9e, 0xce, 0x20, 0x3e, 0xb3, 0x90, 0x20, 0x17, 0x6f, 0x90, 0xab,
	0x8f, 0xab, 0x63, 0xb0, 0x2b, 0x54, 0x88, 0x05, 0x24, 0xe4, 0xe2, 0x19, 0x8c, 0x64, 0x1e, 0xab,
	0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x09, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x83,
	0x33, 0xf7, 0x21, 0x01, 0x00, 0x00,
}

func (m *ControlAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProtocolType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintControlAck(dAtA, i, uint64(m.ProtocolType))
	}
	if m.UserID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintControlAck(dAtA, i, uint64(m.UserID))
	}
	if m.TopicID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintControlAck(dAtA, i, uint64(m.TopicID))
	}
	if m.AckCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintControlAck(dAtA, i, uint64(m.AckCode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintControlAck(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ControlAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolType != 0 {
		n += 1 + sovControlAck(uint64(m.ProtocolType))
	}
	if m.UserID != 0 {
		n += 1 + sovControlAck(uint64(m.UserID))
	}
	if m.TopicID != 0 {
		n += 1 + sovControlAck(uint64(m.TopicID))
	}
	if m.AckCode != 0 {
		n += 1 + sovControlAck(uint64(m.AckCode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovControlAck(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozControlAck(x uint64) (n int) {
	return sovControlAck(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ControlAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControlAck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolType", wireType)
			}
			m.ProtocolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCode", wireType)
			}
			m.AckCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControlAck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipControlAck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthControlAck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipControlAck(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowControlAck
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControlAck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControlAck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthControlAck
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowControlAck
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipControlAck(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthControlAck = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowControlAck   = fmt.Errorf("proto: integer overflow")
)
