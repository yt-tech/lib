// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: order.proto

package order

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//协议类型
type ProtocolType int32

const (
	ProtocolType_UNKNOWN       ProtocolType = 0
	ProtocolType_CONNECT       ProtocolType = 1
	ProtocolType_CONNECTACK    ProtocolType = 2
	ProtocolType_SUB           ProtocolType = 3
	ProtocolType_SUBACK        ProtocolType = 4
	ProtocolType_UNSUB         ProtocolType = 5
	ProtocolType_UNSUBACK      ProtocolType = 6
	ProtocolType_HOLDMIC       ProtocolType = 7
	ProtocolType_HOLDMICACK    ProtocolType = 8
	ProtocolType_RELEASEMIC    ProtocolType = 9
	ProtocolType_RELEASEMICACK ProtocolType = 10
	ProtocolType_DISCONNECT    ProtocolType = 11
	ProtocolType_DISCONNECTACK ProtocolType = 12
	ProtocolType_REGISTER      ProtocolType = 13
	ProtocolType_REGISTERACK   ProtocolType = 14
	ProtocolType_SYSTEM        ProtocolType = 15
	ProtocolType_SYSTEMACK     ProtocolType = 16
)

var ProtocolType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "CONNECT",
	2:  "CONNECTACK",
	3:  "SUB",
	4:  "SUBACK",
	5:  "UNSUB",
	6:  "UNSUBACK",
	7:  "HOLDMIC",
	8:  "HOLDMICACK",
	9:  "RELEASEMIC",
	10: "RELEASEMICACK",
	11: "DISCONNECT",
	12: "DISCONNECTACK",
	13: "REGISTER",
	14: "REGISTERACK",
	15: "SYSTEM",
	16: "SYSTEMACK",
}

var ProtocolType_value = map[string]int32{
	"UNKNOWN":       0,
	"CONNECT":       1,
	"CONNECTACK":    2,
	"SUB":           3,
	"SUBACK":        4,
	"UNSUB":         5,
	"UNSUBACK":      6,
	"HOLDMIC":       7,
	"HOLDMICACK":    8,
	"RELEASEMIC":    9,
	"RELEASEMICACK": 10,
	"DISCONNECT":    11,
	"DISCONNECTACK": 12,
	"REGISTER":      13,
	"REGISTERACK":   14,
	"SYSTEM":        15,
	"SYSTEMACK":     16,
}

func (x ProtocolType) String() string {
	return proto.EnumName(ProtocolType_name, int32(x))
}

func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}

type Control struct {
	ProtocolType         ProtocolType `protobuf:"varint,1,opt,name=protocolType,proto3,enum=order.ProtocolType" json:"protocolType,omitempty"`
	OrgID                uint32       `protobuf:"varint,2,opt,name=orgID,proto3" json:"orgID,omitempty"`
	UserID               uint32       `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	RootGroupID          uint32       `protobuf:"varint,4,opt,name=rootGroupID,proto3" json:"rootGroupID,omitempty"`
	GroupID              uint32       `protobuf:"varint,5,opt,name=groupID,proto3" json:"groupID,omitempty"`
	AckCode              uint32       `protobuf:"varint,6,opt,name=ackCode,proto3" json:"ackCode,omitempty"`
	SubGroup             uint32       `protobuf:"varint,7,opt,name=subGroup,proto3" json:"subGroup,omitempty"`
	TopicPriority        uint32       `protobuf:"varint,8,opt,name=topicPriority,proto3" json:"topicPriority,omitempty"`
	MicPriority          uint32       `protobuf:"varint,9,opt,name=micPriority,proto3" json:"micPriority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Control) Reset()         { *m = Control{} }
func (m *Control) String() string { return proto.CompactTextString(m) }
func (*Control) ProtoMessage()    {}
func (*Control) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd01338c35d87077, []int{0}
}
func (m *Control) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Control) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Control.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Control) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Control.Merge(m, src)
}
func (m *Control) XXX_Size() int {
	return m.Size()
}
func (m *Control) XXX_DiscardUnknown() {
	xxx_messageInfo_Control.DiscardUnknown(m)
}

var xxx_messageInfo_Control proto.InternalMessageInfo

func (m *Control) GetProtocolType() ProtocolType {
	if m != nil {
		return m.ProtocolType
	}
	return ProtocolType_UNKNOWN
}

func (m *Control) GetOrgID() uint32 {
	if m != nil {
		return m.OrgID
	}
	return 0
}

func (m *Control) GetUserID() uint32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *Control) GetRootGroupID() uint32 {
	if m != nil {
		return m.RootGroupID
	}
	return 0
}

func (m *Control) GetGroupID() uint32 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *Control) GetAckCode() uint32 {
	if m != nil {
		return m.AckCode
	}
	return 0
}

func (m *Control) GetSubGroup() uint32 {
	if m != nil {
		return m.SubGroup
	}
	return 0
}

func (m *Control) GetTopicPriority() uint32 {
	if m != nil {
		return m.TopicPriority
	}
	return 0
}

func (m *Control) GetMicPriority() uint32 {
	if m != nil {
		return m.MicPriority
	}
	return 0
}

func init() {
	proto.RegisterEnum("order.ProtocolType", ProtocolType_name, ProtocolType_value)
	proto.RegisterType((*Control)(nil), "order.Control")
}

func init() { proto.RegisterFile("order.proto", fileDescriptor_cd01338c35d87077) }

var fileDescriptor_cd01338c35d87077 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcd, 0x8e, 0x93, 0x50,
	0x14, 0xc7, 0x07, 0x3a, 0x7c, 0x1d, 0xa0, 0x73, 0x3d, 0x1a, 0x73, 0xe3, 0x82, 0x34, 0xc6, 0xc5,
	0xc4, 0xc5, 0x2c, 0x74, 0xe1, 0x7a, 0x0a, 0x64, 0x24, 0xd3, 0xd2, 0x86, 0x8f, 0x18, 0x97, 0xb6,
	0x25, 0x4d, 0x63, 0xf5, 0x92, 0x5b, 0xba, 0xe8, 0xda, 0x97, 0xf0, 0x19, 0x7c, 0x12, 0x97, 0x3e,
	0x82, 0xa9, 0x2f, 0x62, 0xce, 0x85, 0x4e, 0xe9, 0xee, 0xfc, 0xfe, 0xbf, 0x3f, 0x87, 0x13, 0x02,
	0xb8, 0x42, 0xae, 0x2a, 0x79, 0x57, 0x4b, 0xd1, 0x08, 0x34, 0x14, 0xbc, 0xfe, 0xa5, 0x83, 0x15,
	0x8a, 0xef, 0x8d, 0x14, 0x5b, 0xfc, 0x00, 0x9e, 0x72, 0x4b, 0xb1, 0x2d, 0x0e, 0x75, 0xc5, 0xb5,
	0x91, 0x76, 0x3b, 0x7c, 0xf7, 0xfc, 0xae, 0x7d, 0x6c, 0xde, 0x53, 0xd9, 0x45, 0x11, 0x5f, 0x80,
	0x21, 0xe4, 0x3a, 0x89, 0xb8, 0x3e, 0xd2, 0x6e, 0xfd, 0xac, 0x05, 0x7c, 0x09, 0xe6, 0x7e, 0x57,
	0xc9, 0x24, 0xe2, 0x03, 0x15, 0x77, 0x84, 0x23, 0x70, 0xa5, 0x10, 0xcd, 0x83, 0x14, 0xfb, 0x3a,
	0x89, 0xf8, 0xb5, 0x92, 0xfd, 0x08, 0x39, 0x58, 0xeb, 0xce, 0x1a, 0xca, 0x9e, 0x90, 0xcc, 0x97,
	0xe5, 0xd7, 0x50, 0xac, 0x2a, 0x6e, 0xb6, 0xa6, 0x43, 0x7c, 0x05, 0xf6, 0x6e, 0xbf, 0x50, 0x1b,
	0xb8, 0xa5, 0xd4, 0x13, 0xe3, 0x1b, 0xf0, 0x1b, 0x51, 0x6f, 0x96, 0x73, 0xb9, 0x11, 0x72, 0xd3,
	0x1c, 0xb8, 0xad, 0x0a, 0x97, 0x21, 0xdd, 0xf5, 0xad, 0xd7, 0x71, 0xda, 0xbb, 0x7a, 0xd1, 0xdb,
	0x1f, 0x3a, 0x78, 0xfd, 0xcf, 0x80, 0x2e, 0x58, 0x65, 0xfa, 0x98, 0xce, 0x3e, 0xa5, 0xec, 0x8a,
	0x20, 0x9c, 0xa5, 0x69, 0x1c, 0x16, 0x4c, 0xc3, 0x21, 0x40, 0x07, 0xf7, 0xe1, 0x23, 0xd3, 0xd1,
	0x82, 0x41, 0x5e, 0x8e, 0xd9, 0x00, 0x01, 0xcc, 0xbc, 0x1c, 0x53, 0x78, 0x8d, 0x0e, 0x18, 0x65,
	0x4a, 0xb1, 0x81, 0x1e, 0xd8, 0x6a, 0x24, 0x61, 0xd2, 0xaa, 0x8f, 0xb3, 0x49, 0x34, 0x4d, 0x42,
	0x66, 0xd1, 0xaa, 0x0e, 0x48, 0xda, 0xc4, 0x59, 0x3c, 0x89, 0xef, 0xf3, 0x98, 0xbc, 0x83, 0xcf,
	0xc0, 0x3f, 0x33, 0x55, 0x80, 0x2a, 0x51, 0x92, 0x9f, 0xae, 0x71, 0xa9, 0x72, 0x66, 0xaa, 0x78,
	0xf4, 0xc2, 0x2c, 0x7e, 0x48, 0xf2, 0x22, 0xce, 0x98, 0x8f, 0x37, 0xe0, 0x9e, 0x88, 0xf4, 0x50,
	0x9d, 0xf9, 0x39, 0x2f, 0xe2, 0x29, 0xbb, 0x41, 0x1f, 0x9c, 0x76, 0x26, 0xc5, 0xc6, 0xec, 0xf7,
	0x31, 0xd0, 0xfe, 0x1c, 0x03, 0xed, 0xef, 0x31, 0xd0, 0x7e, 0xfe, 0x0b, 0xae, 0x16, 0xa6, 0xfa,
	0x1b, 0xde, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x97, 0x44, 0x72, 0xc2, 0x61, 0x02, 0x00, 0x00,
}

func (m *Control) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Control) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProtocolType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.ProtocolType))
	}
	if m.OrgID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.OrgID))
	}
	if m.UserID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.UserID))
	}
	if m.RootGroupID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.RootGroupID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.GroupID))
	}
	if m.AckCode != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.AckCode))
	}
	if m.SubGroup != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.SubGroup))
	}
	if m.TopicPriority != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.TopicPriority))
	}
	if m.MicPriority != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintOrder(dAtA, i, uint64(m.MicPriority))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Control) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProtocolType != 0 {
		n += 1 + sovOrder(uint64(m.ProtocolType))
	}
	if m.OrgID != 0 {
		n += 1 + sovOrder(uint64(m.OrgID))
	}
	if m.UserID != 0 {
		n += 1 + sovOrder(uint64(m.UserID))
	}
	if m.RootGroupID != 0 {
		n += 1 + sovOrder(uint64(m.RootGroupID))
	}
	if m.GroupID != 0 {
		n += 1 + sovOrder(uint64(m.GroupID))
	}
	if m.AckCode != 0 {
		n += 1 + sovOrder(uint64(m.AckCode))
	}
	if m.SubGroup != 0 {
		n += 1 + sovOrder(uint64(m.SubGroup))
	}
	if m.TopicPriority != 0 {
		n += 1 + sovOrder(uint64(m.TopicPriority))
	}
	if m.MicPriority != 0 {
		n += 1 + sovOrder(uint64(m.MicPriority))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrder(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Control) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Control: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Control: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolType", wireType)
			}
			m.ProtocolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtocolType |= (ProtocolType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgID", wireType)
			}
			m.OrgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrgID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootGroupID", wireType)
			}
			m.RootGroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootGroupID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCode", wireType)
			}
			m.AckCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubGroup", wireType)
			}
			m.SubGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubGroup |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicPriority", wireType)
			}
			m.TopicPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicPriority |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MicPriority", wireType)
			}
			m.MicPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MicPriority |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrder(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrder = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder   = fmt.Errorf("proto: integer overflow")
)
