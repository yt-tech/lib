// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: audio_packet.proto

package audio

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AudioPacket struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Qn                   uint32   `protobuf:"varint,2,opt,name=qn,proto3" json:"qn,omitempty"`
	TopicID              uint32   `protobuf:"varint,3,opt,name=topicID,proto3" json:"topicID,omitempty"`
	UserID               uint32   `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`
	AudioData            []byte   `protobuf:"bytes,5,opt,name=audioData,proto3" json:"audioData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AudioPacket) Reset()         { *m = AudioPacket{} }
func (m *AudioPacket) String() string { return proto.CompactTextString(m) }
func (*AudioPacket) ProtoMessage()    {}
func (*AudioPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7cfaf757677855d, []int{0}
}
func (m *AudioPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AudioPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AudioPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AudioPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AudioPacket.Merge(m, src)
}
func (m *AudioPacket) XXX_Size() int {
	return m.Size()
}
func (m *AudioPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_AudioPacket.DiscardUnknown(m)
}

var xxx_messageInfo_AudioPacket proto.InternalMessageInfo

func (m *AudioPacket) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *AudioPacket) GetQn() uint32 {
	if m != nil {
		return m.Qn
	}
	return 0
}

func (m *AudioPacket) GetTopicID() uint32 {
	if m != nil {
		return m.TopicID
	}
	return 0
}

func (m *AudioPacket) GetUserID() uint32 {
	if m != nil {
		return m.UserID
	}
	return 0
}

func (m *AudioPacket) GetAudioData() []byte {
	if m != nil {
		return m.AudioData
	}
	return nil
}

func init() {
	proto.RegisterType((*AudioPacket)(nil), "audio.AudioPacket")
}

func init() { proto.RegisterFile("audio_packet.proto", fileDescriptor_f7cfaf757677855d) }

var fileDescriptor_f7cfaf757677855d = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x2c, 0x4d, 0xc9,
	0xcc, 0x8f, 0x2f, 0x48, 0x4c, 0xce, 0x4e, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x8b, 0x29, 0x75, 0x33, 0x72, 0x71, 0x3b, 0x82, 0x58, 0x01, 0x60, 0x49, 0x21, 0x19, 0x2e,
	0xce, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6,
	0x20, 0x84, 0x80, 0x10, 0x1f, 0x17, 0x53, 0x61, 0x9e, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6f, 0x10,
	0x53, 0x61, 0x9e, 0x90, 0x04, 0x17, 0x7b, 0x49, 0x7e, 0x41, 0x66, 0xb2, 0xa7, 0x8b, 0x04, 0x33,
	0x58, 0x10, 0xc6, 0x15, 0x12, 0xe3, 0x62, 0x2b, 0x2d, 0x4e, 0x2d, 0xf2, 0x74, 0x91, 0x60, 0x01,
	0x4b, 0x40, 0x79, 0x20, 0xf3, 0xc1, 0x16, 0xbb, 0x24, 0x96, 0x24, 0x4a, 0xb0, 0x2a, 0x30, 0x6a,
	0xf0, 0x04, 0x21, 0x04, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xae, 0x35, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x76, 0x2f, 0x9f, 0xb9, 0xc3, 0x00, 0x00, 0x00,
}

func (m *AudioPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AudioPacket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAudioPacket(dAtA, i, uint64(m.Timestamp))
	}
	if m.Qn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAudioPacket(dAtA, i, uint64(m.Qn))
	}
	if m.TopicID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAudioPacket(dAtA, i, uint64(m.TopicID))
	}
	if m.UserID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAudioPacket(dAtA, i, uint64(m.UserID))
	}
	if len(m.AudioData) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAudioPacket(dAtA, i, uint64(len(m.AudioData)))
		i += copy(dAtA[i:], m.AudioData)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAudioPacket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AudioPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovAudioPacket(uint64(m.Timestamp))
	}
	if m.Qn != 0 {
		n += 1 + sovAudioPacket(uint64(m.Qn))
	}
	if m.TopicID != 0 {
		n += 1 + sovAudioPacket(uint64(m.TopicID))
	}
	if m.UserID != 0 {
		n += 1 + sovAudioPacket(uint64(m.UserID))
	}
	l = len(m.AudioData)
	if l > 0 {
		n += 1 + l + sovAudioPacket(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAudioPacket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAudioPacket(x uint64) (n int) {
	return sovAudioPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AudioPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAudioPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AudioPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AudioPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qn", wireType)
			}
			m.Qn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qn |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicID", wireType)
			}
			m.TopicID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			m.UserID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AudioData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAudioPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AudioData = append(m.AudioData[:0], dAtA[iNdEx:postIndex]...)
			if m.AudioData == nil {
				m.AudioData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAudioPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAudioPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAudioPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAudioPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAudioPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAudioPacket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAudioPacket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAudioPacket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAudioPacket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAudioPacket   = fmt.Errorf("proto: integer overflow")
)
