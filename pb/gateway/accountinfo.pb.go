// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accountinfo.proto

//包名，通过protoc生成时go文件时

package gateway

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//账号类型
type AccountType int32

const (
	AccountType_USERDEFINED AccountType = 0
	AccountType_MOBILE      AccountType = 1
	AccountType_EMAIL       AccountType = 2
	AccountType_HARDINFO    AccountType = 3
	AccountType_RESERVE1    AccountType = 4
	AccountType_RESERVE2    AccountType = 5
	AccountType_RESERVE3    AccountType = 6
)

var AccountType_name = map[int32]string{
	0: "USERDEFINED",
	1: "MOBILE",
	2: "EMAIL",
	3: "HARDINFO",
	4: "RESERVE1",
	5: "RESERVE2",
	6: "RESERVE3",
}

var AccountType_value = map[string]int32{
	"USERDEFINED": 0,
	"MOBILE":      1,
	"EMAIL":       2,
	"HARDINFO":    3,
	"RESERVE1":    4,
	"RESERVE2":    5,
	"RESERVE3":    6,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}

func (AccountType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c818053d22c59a62, []int{0}
}

//账号
type UserInfo struct {
	Account              string      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	AccountType          AccountType `protobuf:"varint,2,opt,name=accountType,proto3,enum=gateway.AccountType" json:"accountType,omitempty"`
	Version              string      `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Platform             string      `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	HardInfo             string      `protobuf:"bytes,5,opt,name=hardInfo,proto3" json:"hardInfo,omitempty"`
	Device               string      `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	OsInfo               string      `protobuf:"bytes,7,opt,name=osInfo,proto3" json:"osInfo,omitempty"`
	Imei                 string      `protobuf:"bytes,8,opt,name=imei,proto3" json:"imei,omitempty"`
	Meid                 string      `protobuf:"bytes,9,opt,name=meid,proto3" json:"meid,omitempty"`
	Imsi                 string      `protobuf:"bytes,10,opt,name=imsi,proto3" json:"imsi,omitempty"`
	Iccid                string      `protobuf:"bytes,11,opt,name=iccid,proto3" json:"iccid,omitempty"`
	SeriesNumber         string      `protobuf:"bytes,12,opt,name=seriesNumber,proto3" json:"seriesNumber,omitempty"`
	Reserve1             string      `protobuf:"bytes,13,opt,name=reserve1,proto3" json:"reserve1,omitempty"`
	Reserve2             string      `protobuf:"bytes,14,opt,name=reserve2,proto3" json:"reserve2,omitempty"`
	Reserve3             string      `protobuf:"bytes,15,opt,name=reserve3,proto3" json:"reserve3,omitempty"`
	Reserve4             string      `protobuf:"bytes,16,opt,name=reserve4,proto3" json:"reserve4,omitempty"`
	Reserve5             string      `protobuf:"bytes,17,opt,name=reserve5,proto3" json:"reserve5,omitempty"`
	Reserve6             string      `protobuf:"bytes,18,opt,name=reserve6,proto3" json:"reserve6,omitempty"`
	Reserve7             string      `protobuf:"bytes,19,opt,name=reserve7,proto3" json:"reserve7,omitempty"`
	Reserve8             string      `protobuf:"bytes,20,opt,name=reserve8,proto3" json:"reserve8,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c818053d22c59a62, []int{0}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *UserInfo) GetAccountType() AccountType {
	if m != nil {
		return m.AccountType
	}
	return AccountType_USERDEFINED
}

func (m *UserInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *UserInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *UserInfo) GetHardInfo() string {
	if m != nil {
		return m.HardInfo
	}
	return ""
}

func (m *UserInfo) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *UserInfo) GetOsInfo() string {
	if m != nil {
		return m.OsInfo
	}
	return ""
}

func (m *UserInfo) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *UserInfo) GetMeid() string {
	if m != nil {
		return m.Meid
	}
	return ""
}

func (m *UserInfo) GetImsi() string {
	if m != nil {
		return m.Imsi
	}
	return ""
}

func (m *UserInfo) GetIccid() string {
	if m != nil {
		return m.Iccid
	}
	return ""
}

func (m *UserInfo) GetSeriesNumber() string {
	if m != nil {
		return m.SeriesNumber
	}
	return ""
}

func (m *UserInfo) GetReserve1() string {
	if m != nil {
		return m.Reserve1
	}
	return ""
}

func (m *UserInfo) GetReserve2() string {
	if m != nil {
		return m.Reserve2
	}
	return ""
}

func (m *UserInfo) GetReserve3() string {
	if m != nil {
		return m.Reserve3
	}
	return ""
}

func (m *UserInfo) GetReserve4() string {
	if m != nil {
		return m.Reserve4
	}
	return ""
}

func (m *UserInfo) GetReserve5() string {
	if m != nil {
		return m.Reserve5
	}
	return ""
}

func (m *UserInfo) GetReserve6() string {
	if m != nil {
		return m.Reserve6
	}
	return ""
}

func (m *UserInfo) GetReserve7() string {
	if m != nil {
		return m.Reserve7
	}
	return ""
}

func (m *UserInfo) GetReserve8() string {
	if m != nil {
		return m.Reserve8
	}
	return ""
}

func init() {
	proto.RegisterEnum("gateway.AccountType", AccountType_name, AccountType_value)
	proto.RegisterType((*UserInfo)(nil), "gateway.UserInfo")
}

func init() { proto.RegisterFile("accountinfo.proto", fileDescriptor_c818053d22c59a62) }

var fileDescriptor_c818053d22c59a62 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd2, 0xc1, 0x4e, 0xdb, 0x30,
	0x18, 0x07, 0x70, 0x02, 0x6d, 0xda, 0x7e, 0xed, 0xc0, 0x78, 0xd5, 0xf4, 0x69, 0x87, 0x0a, 0x71,
	0x42, 0x3b, 0x54, 0xa2, 0x85, 0xc2, 0xb5, 0xa8, 0x46, 0x8b, 0x04, 0x45, 0x0a, 0x63, 0xf7, 0x90,
	0xba, 0x9b, 0xa5, 0xa5, 0xae, 0xec, 0xd0, 0xa9, 0x6f, 0xb2, 0x07, 0xd9, 0x43, 0xec, 0xb8, 0x47,
	0x98, 0xba, 0x17, 0x99, 0x6c, 0x27, 0xc3, 0xbe, 0xf9, 0xff, 0xff, 0x7d, 0xf9, 0x14, 0x2b, 0x81,
	0xe3, 0x2c, 0xcf, 0xe5, 0xcb, 0xaa, 0x14, 0xab, 0xa5, 0x1c, 0xae, 0x95, 0x2c, 0x25, 0x6d, 0x7d,
	0xc9, 0x4a, 0xfe, 0x3d, 0xdb, 0x9e, 0xfe, 0x6c, 0x40, 0xfb, 0x49, 0x73, 0x95, 0xac, 0x96, 0x92,
	0x22, 0xb4, 0xaa, 0x51, 0x8c, 0x4e, 0xa2, 0xb3, 0x4e, 0x5a, 0x47, 0x3a, 0x81, 0x6e, 0x75, 0xfc,
	0xb4, 0x5d, 0x73, 0xdc, 0x3f, 0x89, 0xce, 0x0e, 0x47, 0xfd, 0x61, 0xb5, 0x65, 0x38, 0x7d, 0xb5,
	0xd4, 0x1f, 0x34, 0x1b, 0x37, 0x5c, 0x69, 0x21, 0x57, 0x78, 0xe0, 0x36, 0x56, 0x91, 0xbe, 0x87,
	0xf6, 0xfa, 0x5b, 0x56, 0x2e, 0xa5, 0x2a, 0xb0, 0x61, 0xe9, 0x7f, 0x36, 0xf6, 0x35, 0x53, 0x0b,
	0xf3, 0x4e, 0xd8, 0x74, 0x56, 0x67, 0xfa, 0x0e, 0xe2, 0x05, 0xdf, 0x88, 0x9c, 0x63, 0x6c, 0xa5,
	0x4a, 0xa6, 0x97, 0xda, 0x3e, 0xd1, 0x72, 0xbd, 0x4b, 0x94, 0x42, 0x43, 0x14, 0x5c, 0x60, 0xdb,
	0xb6, 0xf6, 0x6c, 0xba, 0x82, 0x8b, 0x05, 0x76, 0x5c, 0x67, 0xce, 0x6e, 0x4e, 0x0b, 0x84, 0x7a,
	0x4e, 0x0b, 0xda, 0x87, 0xa6, 0xc8, 0x73, 0xb1, 0xc0, 0xae, 0x2d, 0x5d, 0xa0, 0xa7, 0xd0, 0xd3,
	0x5c, 0x09, 0xae, 0xe7, 0x2f, 0xc5, 0x33, 0x57, 0xd8, 0xb3, 0x18, 0x74, 0xe6, 0x06, 0x8a, 0x6b,
	0xae, 0x36, 0xfc, 0x1c, 0xdf, 0xb8, 0x1b, 0xd4, 0xd9, 0xb3, 0x11, 0x1e, 0x06, 0x36, 0xf2, 0x6c,
	0x8c, 0x47, 0x81, 0x8d, 0x3d, 0xbb, 0x40, 0x12, 0xd8, 0x85, 0x67, 0x97, 0x78, 0x1c, 0xd8, 0xa5,
	0x67, 0x13, 0xa4, 0x81, 0x4d, 0x3c, 0xbb, 0xc2, 0xb7, 0x81, 0x5d, 0x79, 0x76, 0x8d, 0xfd, 0xc0,
	0xae, 0x3f, 0x14, 0xd0, 0xf5, 0xbe, 0x39, 0x3d, 0x82, 0xee, 0xd3, 0x23, 0x4b, 0x67, 0xec, 0x36,
	0x99, 0xb3, 0x19, 0xd9, 0xa3, 0x00, 0xf1, 0xfd, 0xc3, 0x4d, 0x72, 0xc7, 0x48, 0x44, 0x3b, 0xd0,
	0x64, 0xf7, 0xd3, 0xe4, 0x8e, 0xec, 0xd3, 0x1e, 0xb4, 0x3f, 0x4e, 0xd3, 0x59, 0x32, 0xbf, 0x7d,
	0x20, 0x07, 0x26, 0xa5, 0xec, 0x91, 0xa5, 0x9f, 0xd9, 0x39, 0x69, 0x78, 0x69, 0x44, 0x9a, 0x5e,
	0x1a, 0x93, 0xf8, 0x86, 0xfc, 0xda, 0x0d, 0xa2, 0xdf, 0xbb, 0x41, 0xf4, 0x67, 0x37, 0x88, 0x7e,
	0xfc, 0x1d, 0xec, 0x3d, 0xc7, 0xf6, 0x3f, 0x1e, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x2c,
	0x6d, 0xc9, 0xdc, 0x02, 0x00, 0x00,
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Account)))
		i += copy(dAtA[i:], m.Account)
	}
	if m.AccountType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(m.AccountType))
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.HardInfo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.HardInfo)))
		i += copy(dAtA[i:], m.HardInfo)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.OsInfo) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.OsInfo)))
		i += copy(dAtA[i:], m.OsInfo)
	}
	if len(m.Imei) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Imei)))
		i += copy(dAtA[i:], m.Imei)
	}
	if len(m.Meid) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Meid)))
		i += copy(dAtA[i:], m.Meid)
	}
	if len(m.Imsi) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Imsi)))
		i += copy(dAtA[i:], m.Imsi)
	}
	if len(m.Iccid) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Iccid)))
		i += copy(dAtA[i:], m.Iccid)
	}
	if len(m.SeriesNumber) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.SeriesNumber)))
		i += copy(dAtA[i:], m.SeriesNumber)
	}
	if len(m.Reserve1) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve1)))
		i += copy(dAtA[i:], m.Reserve1)
	}
	if len(m.Reserve2) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve2)))
		i += copy(dAtA[i:], m.Reserve2)
	}
	if len(m.Reserve3) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve3)))
		i += copy(dAtA[i:], m.Reserve3)
	}
	if len(m.Reserve4) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve4)))
		i += copy(dAtA[i:], m.Reserve4)
	}
	if len(m.Reserve5) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve5)))
		i += copy(dAtA[i:], m.Reserve5)
	}
	if len(m.Reserve6) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve6)))
		i += copy(dAtA[i:], m.Reserve6)
	}
	if len(m.Reserve7) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve7)))
		i += copy(dAtA[i:], m.Reserve7)
	}
	if len(m.Reserve8) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAccountinfo(dAtA, i, uint64(len(m.Reserve8)))
		i += copy(dAtA[i:], m.Reserve8)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAccountinfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	if m.AccountType != 0 {
		n += 1 + sovAccountinfo(uint64(m.AccountType))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.HardInfo)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.OsInfo)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Imei)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Meid)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Imsi)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Iccid)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.SeriesNumber)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve1)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve2)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve3)
	if l > 0 {
		n += 1 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve4)
	if l > 0 {
		n += 2 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve5)
	if l > 0 {
		n += 2 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve6)
	if l > 0 {
		n += 2 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve7)
	if l > 0 {
		n += 2 + l + sovAccountinfo(uint64(l))
	}
	l = len(m.Reserve8)
	if l > 0 {
		n += 2 + l + sovAccountinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAccountinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccountinfo(x uint64) (n int) {
	return sovAccountinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountType", wireType)
			}
			m.AccountType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountType |= (AccountType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HardInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OsInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imei", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imei = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Meid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Imsi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iccid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iccid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeriesNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeriesNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve7 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve8", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserve8 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAccountinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccountinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccountinfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccountinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountinfo   = fmt.Errorf("proto: integer overflow")
)
